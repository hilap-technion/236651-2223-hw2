import unittest
import ast

from Enumerator import Enumerator
from AstMakers import Type


class EnumerationTestCases(unittest.TestCase):
    # Notice: the full, unpruned enumeration appears in the file, and
    # commented out lines are programs from the full enumeration that
    # need to be skipped with observational equivalence.
    def testEnumerate1(self):
        contexts = [{"x": 1,"y": 2, "s": 'a', "l": []}]
        enumerator = Enumerator([(0, Type.INT),(1, Type.INT), ('', Type.STRING), ([], Type.INTLIST)],{"x": Type.INT, "y": Type.INT, "s": Type.STRING, "l": Type.STRINGLIST},contexts)

        self.assertEqual("x", ast.unparse(next(enumerator)))  # values: [1]
        self.assertEqual("y", ast.unparse(next(enumerator)))  # values: [2]
        self.assertEqual("s", ast.unparse(next(enumerator)))  # values: ['a']
        self.assertEqual("l", ast.unparse(next(enumerator)))  # values: [[]]
        self.assertEqual("0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("1", ast.unparse(next(enumerator)))  # values: [1]
        self.assertEqual("''", ast.unparse(next(enumerator)))  # values: ['']
        self.assertEqual("[]", ast.unparse(next(enumerator)))  # values: [[]]
        self.assertEqual("-x", ast.unparse(next(enumerator)))  # values: [-1]
        self.assertEqual("-y", ast.unparse(next(enumerator)))  # values: [-2]
        # self.assertEqual("-0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("-1", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("len(s)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(l)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len('')", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len([])", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("x + x", ast.unparse(next(enumerator)))  # values: [2]
        self.assertEqual("x + y", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("x + 0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("x + 1", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("y + x", ast.unparse(next(enumerator)))  # values: [3]
        self.assertEqual("y + y", ast.unparse(next(enumerator)))  # values: [4]
        # self.assertEqual("y + 0", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("y + 1", ast.unparse(next(enumerator)))  # values: [3]
        self.assertEqual("s + s", ast.unparse(next(enumerator)))  # values: ['aa']
        # self.assertEqual("s + ''", ast.unparse(next(enumerator)))  # values: ['a']
        # self.assertEqual("l + l", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("0 + x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("0 + y", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("0 + 0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 + 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("1 + x", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("1 + y", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("1 + 0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("1 + 1", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("'' + s", ast.unparse(next(enumerator)))  # values: ['a']
        # self.assertEqual("'' + ''", ast.unparse(next(enumerator)))  # values: ['']
        # self.assertEqual("[] + []", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("x - x", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("x - y", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("x - 0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("x - 1", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("y - x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("y - y", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("y - 0", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("y - 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("0 - x", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("0 - y", ast.unparse(next(enumerator)))  # values: [-2]
        # self.assertEqual("0 - 0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 - 1", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("1 - x", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("1 - y", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("1 - 0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("1 - 1", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("x * x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("x * y", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("x * 0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("x * 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("y * x", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("y * y", ast.unparse(next(enumerator)))  # values: [4]
        # self.assertEqual("y * 0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("y * 1", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("s * x", ast.unparse(next(enumerator)))  # values: ['a']
        # self.assertEqual("s * y", ast.unparse(next(enumerator)))  # values: ['aa']
        # self.assertEqual("s * 0", ast.unparse(next(enumerator)))  # values: ['']
        # self.assertEqual("s * 1", ast.unparse(next(enumerator)))  # values: ['a']
        # self.assertEqual("l * x", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("l * y", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("l * 0", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("l * 1", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("0 * x", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 * y", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 * 0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 * 1", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("1 * x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("1 * y", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("1 * 0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("1 * 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("'' * x", ast.unparse(next(enumerator)))  # values: ['']
        # self.assertEqual("'' * y", ast.unparse(next(enumerator)))  # values: ['']
        # self.assertEqual("'' * 0", ast.unparse(next(enumerator)))  # values: ['']
        # self.assertEqual("'' * 1", ast.unparse(next(enumerator)))  # values: ['']
        # self.assertEqual("[] * x", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("[] * y", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("[] * 0", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("[] * 1", ast.unparse(next(enumerator)))  # values: [[]]
        # self.assertEqual("x // x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("x // y", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("x // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("x // 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("y // x", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("y // y", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("y // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("y // 1", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("0 // x", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 // y", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("0 // 1", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("1 // x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("1 // y", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("1 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("1 // 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("x % x", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("x % y", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("x // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("x % 1", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("y % x", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("y % y", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("y // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("y % 1", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 % x", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 % y", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("0 % 1", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("1 % x", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("1 % y", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("1 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("1 % 1", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("-len(s)", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("-len(l)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("-len('')", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("-len([])", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("x + len(s)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("x + len(l)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("x + len('')", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("x + len([])", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("y + len(s)", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("y + len(l)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("y + len('')", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("y + len([])", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("0 + len(s)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("0 + len(l)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 + len('')", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("0 + len([])", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("1 + len(s)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("1 + len(l)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("1 + len('')", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("1 + len([])", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("-x + len(s)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("-x + len(l)", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("-x + len('')", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("-x + len([])", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("-y + len(s)", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("-y + len(l)", ast.unparse(next(enumerator)))  # values: [-2]
        # self.assertEqual("-y + len('')", ast.unparse(next(enumerator)))  # values: [-2]
        # self.assertEqual("-y + len([])", ast.unparse(next(enumerator)))  # values: [-2]
        # self.assertEqual("-0 + len(s)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("-0 + len(l)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("-0 + len('')", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("-0 + len([])", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("-1 + len(s)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("-1 + len(l)", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("-1 + len('')", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("-1 + len([])", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("len(s) + x", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + y", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + 0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 1", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + -x", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len(s) + -y", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("len(s) + -0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + -1", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len(s) + len(s)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + len(l)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + len('')", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + len([])", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + (x + x)", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + (x + y)", ast.unparse(next(enumerator)))  # values: [4]
        # self.assertEqual("len(s) + (x + 0)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + (x + 1)", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + (y + x)", ast.unparse(next(enumerator)))  # values: [4]
        # self.assertEqual("len(s) + (y + y)", ast.unparse(next(enumerator)))  # values: [5]
        # self.assertEqual("len(s) + (y + 0)", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + (y + 1)", ast.unparse(next(enumerator)))  # values: [4]
        # self.assertEqual("len(s) + (0 + x)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + (0 + y)", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + (0 + 0)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + (0 + 1)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + (1 + x)", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + (1 + y)", ast.unparse(next(enumerator)))  # values: [4]
        # self.assertEqual("len(s) + (1 + 0)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + (1 + 1)", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + (x - x)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + (x - y)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len(s) + (x - 0)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + (x - 1)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + (y - x)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + (y - y)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + (y - 0)", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + (y - 1)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + (0 - x)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len(s) + (0 - y)", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("len(s) + (0 - 0)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + (0 - 1)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len(s) + (1 - x)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + (1 - y)", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len(s) + (1 - 0)", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + (1 - 1)", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + x * x", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + x * y", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + x * 0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + x * 1", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + y * x", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + y * y", ast.unparse(next(enumerator)))  # values: [5]
        # self.assertEqual("len(s) + y * 0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + y * 1", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + 0 * x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 0 * y", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 0 * 0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 0 * 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 1 * x", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + 1 * y", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + 1 * 0", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 1 * 1", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + x // x", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + x // y", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + x // 1", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + y // x", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + y // y", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + y // 1", ast.unparse(next(enumerator)))  # values: [3]
        # self.assertEqual("len(s) + 0 // x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 0 // y", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 0 // 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 1 // x", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + 1 // y", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 1 // 1", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + x % x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + x % y", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + x % 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + y % x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + y % y", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + y % 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 0 % x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 0 % y", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 0 % 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 1 % x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(s) + 1 % y", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(s) + 1 % 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(l) + x", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(l) + y", ast.unparse(next(enumerator)))  # values: [2]
        # self.assertEqual("len(l) + 0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len(l) + 1", ast.unparse(next(enumerator)))  # values: [1]
        # self.assertEqual("len(l) + -x", ast.unparse(next(enumerator)))  # values: [-1]
        # self.assertEqual("len(l) + -y", ast.unparse(next(enumerator)))  # values: [-2]
        # self.assertEqual("len(l) + -0", ast.unparse(next(enumerator)))  # values: [0]
        # self.assertEqual("len(l) + -1", ast.unparse(next(enumerator)))  # values: [-1]

    def testEnumerate2(self):
        contexts = [{"x": 1,"y": 2},{"x": 8,"y": 2}]
        enumerator = Enumerator([(0, Type.INT),(1,Type.INT),([],Type.INTLIST), ([], Type.STRINGLIST)],{"x": Type.INT,"y": Type.INT},contexts)

        self.assertEqual("x", ast.unparse(next(enumerator)))  # values: [1, 8]
        self.assertEqual("y", ast.unparse(next(enumerator)))  # values: [2, 2]
        self.assertEqual("0", ast.unparse(next(enumerator)))  # values: [0, 0]
        self.assertEqual("1", ast.unparse(next(enumerator)))  # values: [1, 1]
        self.assertEqual("[]", ast.unparse(next(enumerator)))  # values: [[], []]
        self.assertEqual("[]", ast.unparse(next(enumerator)))  # values: [[], []]
        self.assertEqual("-x", ast.unparse(next(enumerator)))  # values: [-1, -8]
        self.assertEqual("-y", ast.unparse(next(enumerator)))  # values: [-2, -2]
        # self.assertEqual("-0", ast.unparse(next(enumerator)))  # values: [0, 0]
        self.assertEqual("-1", ast.unparse(next(enumerator)))  # values: [-1, -1]
        # self.assertEqual("len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        self.assertEqual("x + x", ast.unparse(next(enumerator)))  # values: [2, 16]
        self.assertEqual("x + y", ast.unparse(next(enumerator)))  # values: [3, 10]
        # self.assertEqual("x + 0", ast.unparse(next(enumerator)))  # values: [1, 8]
        self.assertEqual("x + 1", ast.unparse(next(enumerator)))  # values: [2, 9]
        # self.assertEqual("y + x", ast.unparse(next(enumerator)))  # values: [3, 10]
        self.assertEqual("y + y", ast.unparse(next(enumerator)))  # values: [4, 4]
        # self.assertEqual("y + 0", ast.unparse(next(enumerator)))  # values: [2, 2]
        self.assertEqual("y + 1", ast.unparse(next(enumerator)))  # values: [3, 3]
        # self.assertEqual("0 + x", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("0 + y", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("0 + 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 + 1", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("1 + x", ast.unparse(next(enumerator)))  # values: [2, 9]
        # self.assertEqual("1 + y", ast.unparse(next(enumerator)))  # values: [3, 3]
        # self.assertEqual("1 + 0", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("1 + 1", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("[] + []", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("[] + []", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("x - x", ast.unparse(next(enumerator)))  # values: [0, 0]
        self.assertEqual("x - y", ast.unparse(next(enumerator)))  # values: [-1, 6]
        # self.assertEqual("x - 0", ast.unparse(next(enumerator)))  # values: [1, 8]
        self.assertEqual("x - 1", ast.unparse(next(enumerator)))  # values: [0, 7]
        self.assertEqual("y - x", ast.unparse(next(enumerator)))  # values: [1, -6]
        # self.assertEqual("y - y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("y - 0", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("y - 1", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("0 - x", ast.unparse(next(enumerator)))  # values: [-1, -8]
        # self.assertEqual("0 - y", ast.unparse(next(enumerator)))  # values: [-2, -2]
        # self.assertEqual("0 - 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 - 1", ast.unparse(next(enumerator)))  # values: [-1, -1]
        self.assertEqual("1 - x", ast.unparse(next(enumerator)))  # values: [0, -7]
        # self.assertEqual("1 - y", ast.unparse(next(enumerator)))  # values: [-1, -1]
        # self.assertEqual("1 - 0", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("1 - 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        self.assertEqual("x * x", ast.unparse(next(enumerator)))  # values: [1, 64]
        # self.assertEqual("x * y", ast.unparse(next(enumerator)))  # values: [2, 16]
        # self.assertEqual("x * 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("x * 1", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("y * x", ast.unparse(next(enumerator)))  # values: [2, 16]
        # self.assertEqual("y * y", ast.unparse(next(enumerator)))  # values: [4, 4]
        # self.assertEqual("y * 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("y * 1", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("0 * x", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 * y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 * 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 * 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("1 * x", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("1 * y", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("1 * 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("1 * 1", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("[] * x", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("[] * y", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("[] * 0", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("[] * 1", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("[] * x", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("[] * y", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("[] * 0", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("[] * 1", ast.unparse(next(enumerator)))  # values: [[], []]
        # self.assertEqual("x // x", ast.unparse(next(enumerator)))  # values: [1, 1]
        self.assertEqual("x // y", ast.unparse(next(enumerator)))  # values: [0, 4]
        # self.assertEqual("x // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("x // 1", ast.unparse(next(enumerator)))  # values: [1, 8]
        self.assertEqual("y // x", ast.unparse(next(enumerator)))  # values: [2, 0]
        # self.assertEqual("y // y", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("y // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("y // 1", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("0 // x", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 // y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("0 // 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        self.assertEqual("1 // x", ast.unparse(next(enumerator)))  # values: [1, 0]
        # self.assertEqual("1 // y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("1 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("1 // 1", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("x % x", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("x % y", ast.unparse(next(enumerator)))  # values: [1, 0]
        # self.assertEqual("x // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("x % 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        self.assertEqual("y % x", ast.unparse(next(enumerator)))  # values: [0, 2]
        # self.assertEqual("y % y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("y // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("y % 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 % x", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 % y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("0 % 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        self.assertEqual("1 % x", ast.unparse(next(enumerator)))  # values: [0, 1]
        # self.assertEqual("1 % y", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("1 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("1 % 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("-len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("-len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("x + len([])", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("x + len([])", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("y + len([])", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("y + len([])", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("0 + len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("0 + len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("1 + len([])", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("1 + len([])", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("-x + len([])", ast.unparse(next(enumerator)))  # values: [-1, -8]
        # self.assertEqual("-x + len([])", ast.unparse(next(enumerator)))  # values: [-1, -8]
        # self.assertEqual("-y + len([])", ast.unparse(next(enumerator)))  # values: [-2, -2]
        # self.assertEqual("-y + len([])", ast.unparse(next(enumerator)))  # values: [-2, -2]
        # self.assertEqual("-0 + len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("-0 + len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("-1 + len([])", ast.unparse(next(enumerator)))  # values: [-1, -1]
        # self.assertEqual("-1 + len([])", ast.unparse(next(enumerator)))  # values: [-1, -1]
        # self.assertEqual("len([]) + x", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("len([]) + y", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("len([]) + 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 1", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + -x", ast.unparse(next(enumerator)))  # values: [-1, -8]
        # self.assertEqual("len([]) + -y", ast.unparse(next(enumerator)))  # values: [-2, -2]
        # self.assertEqual("len([]) + -0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + -1", ast.unparse(next(enumerator)))  # values: [-1, -1]
        # self.assertEqual("len([]) + len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + (x + x)", ast.unparse(next(enumerator)))  # values: [2, 16]
        # self.assertEqual("len([]) + (x + y)", ast.unparse(next(enumerator)))  # values: [3, 10]
        # self.assertEqual("len([]) + (x + 0)", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("len([]) + (x + 1)", ast.unparse(next(enumerator)))  # values: [2, 9]
        # self.assertEqual("len([]) + (y + x)", ast.unparse(next(enumerator)))  # values: [3, 10]
        # self.assertEqual("len([]) + (y + y)", ast.unparse(next(enumerator)))  # values: [4, 4]
        # self.assertEqual("len([]) + (y + 0)", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("len([]) + (y + 1)", ast.unparse(next(enumerator)))  # values: [3, 3]
        # self.assertEqual("len([]) + (0 + x)", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("len([]) + (0 + y)", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("len([]) + (0 + 0)", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + (0 + 1)", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + (1 + x)", ast.unparse(next(enumerator)))  # values: [2, 9]
        # self.assertEqual("len([]) + (1 + y)", ast.unparse(next(enumerator)))  # values: [3, 3]
        # self.assertEqual("len([]) + (1 + 0)", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + (1 + 1)", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("len([]) + (x - x)", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + (x - y)", ast.unparse(next(enumerator)))  # values: [-1, 6]
        # self.assertEqual("len([]) + (x - 0)", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("len([]) + (x - 1)", ast.unparse(next(enumerator)))  # values: [0, 7]
        # self.assertEqual("len([]) + (y - x)", ast.unparse(next(enumerator)))  # values: [1, -6]
        # self.assertEqual("len([]) + (y - y)", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + (y - 0)", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("len([]) + (y - 1)", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + (0 - x)", ast.unparse(next(enumerator)))  # values: [-1, -8]
        # self.assertEqual("len([]) + (0 - y)", ast.unparse(next(enumerator)))  # values: [-2, -2]
        # self.assertEqual("len([]) + (0 - 0)", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + (0 - 1)", ast.unparse(next(enumerator)))  # values: [-1, -1]
        # self.assertEqual("len([]) + (1 - x)", ast.unparse(next(enumerator)))  # values: [0, -7]
        # self.assertEqual("len([]) + (1 - y)", ast.unparse(next(enumerator)))  # values: [-1, -1]
        # self.assertEqual("len([]) + (1 - 0)", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + (1 - 1)", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + x * x", ast.unparse(next(enumerator)))  # values: [1, 64]
        # self.assertEqual("len([]) + x * y", ast.unparse(next(enumerator)))  # values: [2, 16]
        # self.assertEqual("len([]) + x * 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + x * 1", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("len([]) + y * x", ast.unparse(next(enumerator)))  # values: [2, 16]
        # self.assertEqual("len([]) + y * y", ast.unparse(next(enumerator)))  # values: [4, 4]
        # self.assertEqual("len([]) + y * 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + y * 1", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("len([]) + 0 * x", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 0 * y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 0 * 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 0 * 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 1 * x", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("len([]) + 1 * y", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("len([]) + 1 * 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 1 * 1", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + x // x", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + x // y", ast.unparse(next(enumerator)))  # values: [0, 4]
        # self.assertEqual("len([]) + x // 1", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("len([]) + y // x", ast.unparse(next(enumerator)))  # values: [2, 0]
        # self.assertEqual("len([]) + y // y", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + y // 1", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("len([]) + 0 // x", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 0 // y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 0 // 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 1 // x", ast.unparse(next(enumerator)))  # values: [1, 0]
        # self.assertEqual("len([]) + 1 // y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 1 // 1", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + x % x", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + x % y", ast.unparse(next(enumerator)))  # values: [1, 0]
        # self.assertEqual("len([]) + x % 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + y % x", ast.unparse(next(enumerator)))  # values: [0, 2]
        # self.assertEqual("len([]) + y % y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + y % 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 0 % x", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 0 % y", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 0 % 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 1 % x", ast.unparse(next(enumerator)))  # values: [0, 1]
        # self.assertEqual("len([]) + 1 % y", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + 1 % 1", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + x", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("len([]) + y", ast.unparse(next(enumerator)))  # values: [2, 2]
        # self.assertEqual("len([]) + 0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + 1", ast.unparse(next(enumerator)))  # values: [1, 1]
        # self.assertEqual("len([]) + -x", ast.unparse(next(enumerator)))  # values: [-1, -8]
        # self.assertEqual("len([]) + -y", ast.unparse(next(enumerator)))  # values: [-2, -2]
        # self.assertEqual("len([]) + -0", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + -1", ast.unparse(next(enumerator)))  # values: [-1, -1]
        # self.assertEqual("len([]) + len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + len([])", ast.unparse(next(enumerator)))  # values: [0, 0]
        # self.assertEqual("len([]) + (x + x)", ast.unparse(next(enumerator)))  # values: [2, 16]
        # self.assertEqual("len([]) + (x + y)", ast.unparse(next(enumerator)))  # values: [3, 10]
        # self.assertEqual("len([]) + (x + 0)", ast.unparse(next(enumerator)))  # values: [1, 8]
        # self.assertEqual("len([]) + (x + 1)", ast.unparse(next(enumerator)))  # values: [2, 9]

    def testEnumerate3(self):
        contexts = [{"x": 1}, {"x": 8}, {"x": 2}]
        enumerator = Enumerator([(0,Type.INT),(1,Type.INT)],{"x": Type.INT},contexts)

        self.assertEqual("x", ast.unparse(next(enumerator)))  # values: [1, 8, 2]
        self.assertEqual("0", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        self.assertEqual("1", ast.unparse(next(enumerator)))  # values: [1, 1, 1]
        self.assertEqual("-x", ast.unparse(next(enumerator)))  # values: [-1, -8, -2]
        # self.assertEqual("-0", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        self.assertEqual("-1", ast.unparse(next(enumerator)))  # values: [-1, -1, -1]
        self.assertEqual("x + x", ast.unparse(next(enumerator)))  # values: [2, 16, 4]
        # self.assertEqual("x + 0", ast.unparse(next(enumerator)))  # values: [1, 8, 2]
        self.assertEqual("x + 1", ast.unparse(next(enumerator)))  # values: [2, 9, 3]
        # self.assertEqual("0 + x", ast.unparse(next(enumerator)))  # values: [1, 8, 2]
        # self.assertEqual("0 + 0", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("0 + 1", ast.unparse(next(enumerator)))  # values: [1, 1, 1]
        # self.assertEqual("1 + x", ast.unparse(next(enumerator)))  # values: [2, 9, 3]
        # self.assertEqual("1 + 0", ast.unparse(next(enumerator)))  # values: [1, 1, 1]
        self.assertEqual("1 + 1", ast.unparse(next(enumerator)))  # values: [2, 2, 2]
        # self.assertEqual("x - x", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("x - 0", ast.unparse(next(enumerator)))  # values: [1, 8, 2]
        self.assertEqual("x - 1", ast.unparse(next(enumerator)))  # values: [0, 7, 1]
        # self.assertEqual("0 - x", ast.unparse(next(enumerator)))  # values: [-1, -8, -2]
        # self.assertEqual("0 - 0", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("0 - 1", ast.unparse(next(enumerator)))  # values: [-1, -1, -1]
        self.assertEqual("1 - x", ast.unparse(next(enumerator)))  # values: [0, -7, -1]
        # self.assertEqual("1 - 0", ast.unparse(next(enumerator)))  # values: [1, 1, 1]
        # self.assertEqual("1 - 1", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        self.assertEqual("x * x", ast.unparse(next(enumerator)))  # values: [1, 64, 4]
        # self.assertEqual("x * 0", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("x * 1", ast.unparse(next(enumerator)))  # values: [1, 8, 2]
        # self.assertEqual("0 * x", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("0 * 0", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("0 * 1", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("1 * x", ast.unparse(next(enumerator)))  # values: [1, 8, 2]
        # self.assertEqual("1 * 0", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("1 * 1", ast.unparse(next(enumerator)))  # values: [1, 1, 1]
        # self.assertEqual("x // x", ast.unparse(next(enumerator)))  # values: [1, 1, 1]
        # self.assertEqual("x // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("x // 1", ast.unparse(next(enumerator)))  # values: [1, 8, 2]
        # self.assertEqual("0 // x", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("0 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("0 // 1", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        self.assertEqual("1 // x", ast.unparse(next(enumerator)))  # values: [1, 0, 0]
        # self.assertEqual("1 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("1 // 1", ast.unparse(next(enumerator)))  # values: [1, 1, 1]
        # self.assertEqual("x % x", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("x // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("x % 1", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("0 % x", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("0 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("0 % 1", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        self.assertEqual("1 % x", ast.unparse(next(enumerator)))  # values: [0, 1, 1]
        # self.assertEqual("1 // 0", ast.unparse(next(enumerator)))  # values: ZeroDivisionError
        # self.assertEqual("1 % 1", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("--x", ast.unparse(next(enumerator)))  # values: [1, 8, 2]
        # self.assertEqual("--0", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("--1", ast.unparse(next(enumerator)))  # values: [1, 1, 1]
        self.assertEqual("-(x + x)", ast.unparse(next(enumerator)))  # values: [-2, -16, -4]
        # self.assertEqual("-(x + 0)", ast.unparse(next(enumerator)))  # values: [-1, -8, -2]
        self.assertEqual("-(x + 1)", ast.unparse(next(enumerator)))  # values: [-2, -9, -3]
        # self.assertEqual("-(0 + x)", ast.unparse(next(enumerator)))  # values: [-1, -8, -2]
        # self.assertEqual("-(0 + 0)", ast.unparse(next(enumerator)))  # values: [0, 0, 0]
        # self.assertEqual("-(0 + 1)", ast.unparse(next(enumerator)))  # values: [-1, -1, -1]

if __name__ == '__main__':
    unittest.main()
